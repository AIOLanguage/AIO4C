import
    {
        java.lang.Object::Object
        java.io.BufferedWriter::BufferedWriter
        java.util.List::List
        java.util.ArrayList::ArrayList
    }

class Person : open
    {
        val firstName Str
        var secondName Str
        var age Int

        Person(firstName Str, secondName Str, age Int);

        Person(firstName Str, secondName Str, age Int, organizations Str...)
            {
                $(firstName, secondName, age)
                $org::organizations.addAll(organizations)
                $org::organizations.sort()
            }

        fun getInfo()
            {
                println('Name: #{$name}\nSecond name: #{$secondName}\nFriends:')
                $com::friends.foreach
                    {
                        if (it.isBest) {
                            println(it.person.firstName)
                        }
                    }
                $org::getInfo()
            }

        fun equals(o Object) : override
            = o is Person && $firstName = o.firstName && $secondName = o.secondName && $age = o.age

        scope com
            {
                class Friend(person Person, isBest Boo) : inner : private;

                val friends List<Friend> = ArrayList<>()

                fun sayAll(message Str) : internal : open
                    {
                        println(message)
                    }

                fun sayTo(other Person, message Str)
                    {
                        println("#{other.firstName}, #message")
                    }

                fun addFriend(person Person, isBest Boo)
                    {
                        val friend = Friend(person, isBest)
                        $friends.add(friend)
                    }
            }

        scope org
            {
                val organizations List<Str> : private = ArrayList<>()

                fun getInfo()
                    {
                        println('Organizations:')
                        $organizations.foreach { println(it) }
                    }

                fun writeToFile(fileName Str)
                    {
                        val bufferedWriter = BufferedWriter(FileWriter(fileName))
                        loo (organization in $organizations) {
                            bufferedWriter.write(organization)
                            bufferedWriter.write('\n')
                        }
                        writer.close()
                    }
            }
    }