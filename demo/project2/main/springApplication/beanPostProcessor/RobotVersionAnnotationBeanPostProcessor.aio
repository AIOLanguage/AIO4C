plg {
    org.springframework.beans.BeansException
    org.springframework.beans.factory.config.BeanPostProcessor
    org.springframework.util.ReflectionUtils
    robots.abstractRobot.annotations.RobotVersion
    java.lang.reflect.Field
    java.util.logging.Logger
}

typ RobotVersionAnnotationBeanPostProcessor -> BeanPostProcessor {


    /**
     * Change version.
     */

    @Override
    @Throws(BeansException)
    postProcessBeforeInitialization(+ bean Object, + beanName String) Object
    {
        + clazz = bean.class
        + fields = clazz.declaredFields
        loo (field in fields) {
            + robotVersionAnnotation = field.getAnnotation(RobotVersion::class)
            if (robotVersionAnnotation) {
                ReflectionUtils.makeAccessible(field)
                + minVersion = robotVersionAnnotation.min
                + currentVersion = ReflectionUtils.getField(field, bean) as Int
                if (minVersion > currentVersion) {
                    ReflectionUtils.setField(field, bean, minVersion)
                }
            }
        }
        out bean
    }

    @Override
    @Throws(BeansException::class)
    postProcessAfterInitialization(+ bean Object, + beanName String) Object
    {
        out bean
    }
}