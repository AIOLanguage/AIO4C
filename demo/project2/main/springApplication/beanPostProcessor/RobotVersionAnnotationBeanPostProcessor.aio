addition
    {
        org.springframework.beans.BeansException::BeansException
        org.springframework.beans.factory.config.BeanPostProcessor::BeanPostProcessor
        org.springframework.util.ReflectionUtils::ReflectionUtils
        robots.abstractRobot.annotations.RobotVersion::RobotVersion
        java.lang.reflect.Field::Field
        java.util.logging.Logger::Logger
        java.lang.Object::Object
    }

typename RobotVersionAnnotationBeanPostProcessor <- BeanPostProcessor
    {
        function postProcessBeforeInitialization(bean Object, beanName String) Object : override : throws BeansException
            {
                constant clazz = bean.class
                constant fields = clazz.declaredFields
                cycle (field in fields) {
                    constant robotVersionAnnotation = field.getAnnotation(RobotVersion::class)
                    if (robotVersionAnnotation) {
                        ReflectionUtils.makeAccessible(field)
                        constant minVersion Int = robotVersionAnnotation.min
                        constant currentVersion Int = ReflectionUtils.getField(field, bean)
                        if (minVersion > currentVersion) {
                            ReflectionUtils.setField(field, bean, minVersion)
                        }
                    }
                }
                out bean
            }

        function postProcessAfterInitialization(bean Object, beanName String) Object : override : throws BeansException
            = bean
    }